"""
Django settings for djangoProject project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    # Aplicativos de terceiros
    'rest_framework',
    'rest_framework.authtoken',
    'allauth',
    'allauth.account',
    'widget_tweaks',
    'crispy_forms',
    'crispy_bootstrap5',
    'debug_toolbar',
    # 'django_q',
    # Meus Apps
    'users.apps.UsersConfig',
    'pages.apps.PagesConfig',
    "legaldocs.apps.LegaldocsConfig",
    "products.apps.ProductsConfig",
    "cart.apps.CartConfig",
    'orders.apps.OrderConfig',
    'payments.apps.PaymentsConfig'
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.sites.middleware.CurrentSiteMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    # MEUS MIDDLEWARES
    'pages.middleware.GeneralRateLimitMiddleware',
    'users.middlewares.log_user_actions.LogUserActionsMiddleware',
    'users.middlewares.cached_user.CachedAuthenticationMiddleware'
]

GENERAL_RATE_LIMIT_TIME = 5  # Authenticated users: 5 seconds between requests
ANONYMOUS_RATE_LIMIT_TIME = 8  # Anonymous users: 8 seconds between requests

STRICT_RATE_LIMIT_TIME = 20  # Strict actions: 20 seconds between sensitive updates

ROOT_URLCONF = 'djangoProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": os.getenv('DATABASE_ENGINE', 'django.db.backends.sqlite3'),
            "NAME": os.getenv('DATABASE'),
            "USER": os.getenv('USERNAME'),
            "PASSWORD": os.getenv('PASSWORD'),
            "HOST": os.getenv('HOST'),
            "PORT": os.getenv('PORT'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

SITE_ID = 1

# Configurações do django-allauth
AUTHENTICATION_BACKENDS = [
    # Needed to log in by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]
AUTH_USER_MODEL = "users.User"
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "optional"
LOGIN_REDIRECT_URL = '/sobre/'
ACCOUNT_ADAPTER = 'pages.adapters.MyAccountAdapter'
LOGIN_URL = '/accounts/login/'
ACCOUNT_FORMS = {
    'signup': 'users.forms.UserSignupForm',
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
# Configurações para arquivos estáticos
MEDIA_URL = '/media/'
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = (BASE_DIR / "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Configuração do cache
if DEBUG:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        },
        'file_based': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': str(BASE_DIR / 'cache'),
            'OPTIONS': {
                'MAX_ENTRIES': 1000
            }
        }
    }

# Configuração do sorl-thumbnail para usar o cache de thumbnails
THUMBNAIL_ALIASES = {
    '': {
        'small': {'size': (100, 100), 'crop': 'smart'},
        'medium': {'size': (300, 300), 'crop': 'smart'},
    },
}

# Configuração do cache de thumbnails com caminho absoluto
THUMBNAIL_CACHE_DIR = str(BASE_DIR / 'thumbnails_cache')  # Certifique-se de que este diretório existe
IMAGEKIT_CACHE_BACKEND = 'django.core.cache.backends.filebased.FileBasedCache'
IMAGEKIT_CACHE_LOCATION = str(BASE_DIR / 'imagekit_cache')


SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Configurações do rest_framework
REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '100/day',          # Limite de 100 requisições por dia por usuário autenticado
        'anon': '10/minute',        # Limite de 10 requisições por minuto para usuários anônimos
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 6,  # Defina o número de itens por página
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# TEMPO PADRÃO DE VIGÊNCIA DOS CACHES '1 SEMANA'
CACHE_TIMEOUT = 60 * 60 * 24 * 7

CART_ITEM_MAX_QUANTITY = 20

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'info_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django_info.log'),
            'formatter': 'verbose',
            'encoding': 'utf-8'
        },
        'user_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/user_info.log'),
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django_error.log'),
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django_security.log'),
            'formatter': 'verbose',
        },
        'db_query_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/db_queries.log'),
            'formatter': 'verbose',
        },
        'rate_limit_file': {
            'level': 'DEBUG',  # Adjust this level based on the detail needed
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/rate_limit.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['info_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['db_query_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['info_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'user_activity': {
            'handlers': ['user_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'rate_limit': {  # Add logger for rate-limiting
            'handlers': ['rate_limit_file'],
            'level': 'DEBUG',  # Set to INFO or WARNING in production
            'propagate': False,
        },
    },
}

# TOS and Policies CACHES
CACHE_KEY_TERMS_OF_SERVICE = 'terms_of_service'
CACHE_KEY_PRIVACY_POLICY = 'privacy_policies'
CACHE_KEY_RETURN_POLICY = 'return_policies'

HIGH_TIME_CACHE_TIMEOUT = 60 * 60 * 24 * 100 # 100 days

# Q configuration

# Q_CLUSTER = {
#     'name': 'DjangoQCluster',
#     'workers': 4,  # Number of worker processes
#     'recycle': 500,  # Restart a worker after this many tasks
#     'timeout': 60,  # Maximum time (in seconds) to wait for a task to complete
#     'ack_failures': True,  # Keep track of task failures
#     'retry': 120,  # Retry a failed task after this time (seconds)
#     'max_attempts': 5,  # Maximum number of retries
#     'orm': 'default'  # Use Django ORM as the broker
# }
